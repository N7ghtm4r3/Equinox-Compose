[{"name":"BOTTOM","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.BOTTOM","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/-b-o-t-t-o-m/index.html","searchKeys":["BOTTOM","BOTTOM","com.tecknobit.equinoxcompose.utilities.BorderToColor.BOTTOM"]},{"name":"END","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.END","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/-e-n-d/index.html","searchKeys":["END","END","com.tecknobit.equinoxcompose.utilities.BorderToColor.END"]},{"name":"START","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.START","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/-s-t-a-r-t/index.html","searchKeys":["START","START","com.tecknobit.equinoxcompose.utilities.BorderToColor.START"]},{"name":"TOP","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.TOP","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/-t-o-p/index.html","searchKeys":["TOP","TOP","com.tecknobit.equinoxcompose.utilities.BorderToColor.TOP"]},{"name":"abstract class EquinoxConnectViewModel(val snackbarHostState: SnackbarHostState, val requester: <Error class: unknown class>, val localUser: <Error class: unknown class>) : EquinoxViewModel","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/index.html","searchKeys":["EquinoxConnectViewModel","abstract class EquinoxConnectViewModel(val snackbarHostState: SnackbarHostState, val requester: <Error class: unknown class>, val localUser: <Error class: unknown class>) : EquinoxViewModel","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel"]},{"name":"abstract class EquinoxScreen(val loggerEnabled: Boolean = true)","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/index.html","searchKeys":["EquinoxScreen","abstract class EquinoxScreen(val loggerEnabled: Boolean = true)","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen"]},{"name":"abstract class EquinoxViewModel(val snackbarHostState: SnackbarHostState? = null) : ViewModel","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/index.html","searchKeys":["EquinoxViewModel","abstract class EquinoxViewModel(val snackbarHostState: SnackbarHostState? = null) : ViewModel","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel"]},{"name":"constructor(loggerEnabled: Boolean = true)","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.EquinoxScreen","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/-equinox-screen.html","searchKeys":["EquinoxScreen","constructor(loggerEnabled: Boolean = true)","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.EquinoxScreen"]},{"name":"constructor(serverOfflineMessage: String, serverOfflineIcon: ImageVector, noInternetConnectionMessage: String, noInternetConnectionIcon: ImageVector, hasBeenDisconnectedAction: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.SessionSetup","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/-session-setup.html","searchKeys":["SessionSetup","constructor(serverOfflineMessage: String, serverOfflineIcon: ImageVector, noInternetConnectionMessage: String, noInternetConnectionIcon: ImageVector, hasBeenDisconnectedAction: () -> Unit)","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.SessionSetup"]},{"name":"constructor(snackbarHostState: SnackbarHostState, requester: <Error class: unknown class>, localUser: <Error class: unknown class>)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.EquinoxConnectViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/-equinox-connect-view-model.html","searchKeys":["EquinoxConnectViewModel","constructor(snackbarHostState: SnackbarHostState, requester: <Error class: unknown class>, localUser: <Error class: unknown class>)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.EquinoxConnectViewModel"]},{"name":"constructor(snackbarHostState: SnackbarHostState, requester: <Error class: unknown class>, localUser: <Error class: unknown class>)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.EquinoxProfileViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/-equinox-profile-view-model.html","searchKeys":["EquinoxProfileViewModel","constructor(snackbarHostState: SnackbarHostState, requester: <Error class: unknown class>, localUser: <Error class: unknown class>)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.EquinoxProfileViewModel"]},{"name":"constructor(snackbarHostState: SnackbarHostState? = null)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.EquinoxViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/-equinox-view-model.html","searchKeys":["EquinoxViewModel","constructor(snackbarHostState: SnackbarHostState? = null)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.EquinoxViewModel"]},{"name":"data class SessionSetup(val serverOfflineMessage: String, val serverOfflineIcon: ImageVector, val noInternetConnectionMessage: String, val noInternetConnectionIcon: ImageVector, val hasBeenDisconnectedAction: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/index.html","searchKeys":["SessionSetup","data class SessionSetup(val serverOfflineMessage: String, val serverOfflineIcon: ImageVector, val noInternetConnectionMessage: String, val noInternetConnectionIcon: ImageVector, val hasBeenDisconnectedAction: () -> Unit)","com.tecknobit.equinoxcompose.helpers.session.SessionSetup"]},{"name":"enum BorderToColor : Enum<BorderToColor> ","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/index.html","searchKeys":["BorderToColor","enum BorderToColor : Enum<BorderToColor> ","com.tecknobit.equinoxcompose.utilities.BorderToColor"]},{"name":"expect fun checkInternetConnection(noInternetConnectionState: MutableState<Boolean>)","description":"com.tecknobit.equinoxcompose.helpers.session.checkInternetConnection","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/check-internet-connection.html","searchKeys":["checkInternetConnection","expect fun checkInternetConnection(noInternetConnectionState: MutableState<Boolean>)","com.tecknobit.equinoxcompose.helpers.session.checkInternetConnection"]},{"name":"fun Color.toHex(): String","description":"com.tecknobit.equinoxcompose.utilities.toHex","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/to-hex.html","searchKeys":["toHex","fun Color.toHex(): String","com.tecknobit.equinoxcompose.utilities.toHex"]},{"name":"fun EmptyListUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, icon: ImageVector, themeColor: Color = MaterialTheme.colorScheme.primary, subText: String)","description":"com.tecknobit.equinoxcompose.components.EmptyListUI","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-empty-list-u-i.html","searchKeys":["EmptyListUI","fun EmptyListUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, icon: ImageVector, themeColor: Color = MaterialTheme.colorScheme.primary, subText: String)","com.tecknobit.equinoxcompose.components.EmptyListUI"]},{"name":"fun EmptyListUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, icon: ImageVector, themeColor: Color = MaterialTheme.colorScheme.primary, subText: StringResource)","description":"com.tecknobit.equinoxcompose.components.EmptyListUI","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-empty-list-u-i.html","searchKeys":["EmptyListUI","fun EmptyListUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, icon: ImageVector, themeColor: Color = MaterialTheme.colorScheme.primary, subText: StringResource)","com.tecknobit.equinoxcompose.components.EmptyListUI"]},{"name":"fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: String, text: () -> Unit, dismissAction: () -> Unit = onDismissAction, dismissText: String, confirmAction: () -> Unit, confirmText: String)","description":"com.tecknobit.equinoxcompose.components.EquinoxAlertDialog","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-alert-dialog.html","searchKeys":["EquinoxAlertDialog","fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: String, text: () -> Unit, dismissAction: () -> Unit = onDismissAction, dismissText: String, confirmAction: () -> Unit, confirmText: String)","com.tecknobit.equinoxcompose.components.EquinoxAlertDialog"]},{"name":"fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: String, text: String, dismissAction: () -> Unit = onDismissAction, dismissText: String, confirmAction: () -> Unit, confirmText: String)","description":"com.tecknobit.equinoxcompose.components.EquinoxAlertDialog","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-alert-dialog.html","searchKeys":["EquinoxAlertDialog","fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: String, text: String, dismissAction: () -> Unit = onDismissAction, dismissText: String, confirmAction: () -> Unit, confirmText: String)","com.tecknobit.equinoxcompose.components.EquinoxAlertDialog"]},{"name":"fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: StringResource, text: () -> Unit, dismissAction: () -> Unit = onDismissAction, dismissText: StringResource = Res.string.dismiss, confirmAction: () -> Unit, confirmText: StringResource = Res.string.confirm)","description":"com.tecknobit.equinoxcompose.components.EquinoxAlertDialog","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-alert-dialog.html","searchKeys":["EquinoxAlertDialog","fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: StringResource, text: () -> Unit, dismissAction: () -> Unit = onDismissAction, dismissText: StringResource = Res.string.dismiss, confirmAction: () -> Unit, confirmText: StringResource = Res.string.confirm)","com.tecknobit.equinoxcompose.components.EquinoxAlertDialog"]},{"name":"fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: StringResource, text: StringResource, dismissAction: () -> Unit = onDismissAction, dismissText: StringResource = Res.string.dismiss, confirmAction: () -> Unit, confirmText: StringResource = Res.string.confirm)","description":"com.tecknobit.equinoxcompose.components.EquinoxAlertDialog","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-alert-dialog.html","searchKeys":["EquinoxAlertDialog","fun EquinoxAlertDialog(modifier: Modifier = Modifier, show: MutableState<Boolean>, icon: ImageVector? = null, viewModel: EquinoxViewModel? = null, onDismissAction: () -> Unit = {\n        show.value = false\n        viewModel?.restartRefresher()\n    }, title: StringResource, text: StringResource, dismissAction: () -> Unit = onDismissAction, dismissText: StringResource = Res.string.dismiss, confirmAction: () -> Unit, confirmText: StringResource = Res.string.confirm)","com.tecknobit.equinoxcompose.components.EquinoxAlertDialog"]},{"name":"fun EquinoxOutlinedTextField(modifier: Modifier = Modifier, outlinedTextFieldStyle: TextStyle = LocalTextStyle.current, outlinedTextFieldColors: TextFieldColors = OutlinedTextFieldDefaults.colors(), width: Dp = 300.dp, value: MutableState<String>, mustBeInLowerCase: Boolean = false, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = if (mustBeInLowerCase)\n            it.lowercase()\n        else\n            it\n    }, label: String? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: String? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: String? = null, errorTextStyle: TextStyle = LocalTextStyle.current, trailingIcon: () -> Unit? = {\n        IconButton(\n            onClick = { value.value = \"\" }\n        ) {\n            Icon(\n                imageVector = Icons.Default.Clear,\n                contentDescription = null\n            )\n        }\n    }, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","description":"com.tecknobit.equinoxcompose.components.EquinoxOutlinedTextField","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-outlined-text-field.html","searchKeys":["EquinoxOutlinedTextField","fun EquinoxOutlinedTextField(modifier: Modifier = Modifier, outlinedTextFieldStyle: TextStyle = LocalTextStyle.current, outlinedTextFieldColors: TextFieldColors = OutlinedTextFieldDefaults.colors(), width: Dp = 300.dp, value: MutableState<String>, mustBeInLowerCase: Boolean = false, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = if (mustBeInLowerCase)\n            it.lowercase()\n        else\n            it\n    }, label: String? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: String? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: String? = null, errorTextStyle: TextStyle = LocalTextStyle.current, trailingIcon: () -> Unit? = {\n        IconButton(\n            onClick = { value.value = \"\" }\n        ) {\n            Icon(\n                imageVector = Icons.Default.Clear,\n                contentDescription = null\n            )\n        }\n    }, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","com.tecknobit.equinoxcompose.components.EquinoxOutlinedTextField"]},{"name":"fun EquinoxOutlinedTextField(modifier: Modifier = Modifier, outlinedTextFieldStyle: TextStyle = LocalTextStyle.current, outlinedTextFieldColors: TextFieldColors = OutlinedTextFieldDefaults.colors(), width: Dp = 300.dp, value: MutableState<String>, mustBeInLowerCase: Boolean = false, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = if (mustBeInLowerCase)\n            it.lowercase()\n        else\n            it\n    }, label: StringResource? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: StringResource? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: StringResource? = null, errorTextStyle: TextStyle = LocalTextStyle.current, trailingIcon: () -> Unit? = {\n        IconButton(\n            onClick = { value.value = \"\" }\n        ) {\n            Icon(\n                imageVector = Icons.Default.Clear,\n                contentDescription = null\n            )\n        }\n    }, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","description":"com.tecknobit.equinoxcompose.components.EquinoxOutlinedTextField","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-outlined-text-field.html","searchKeys":["EquinoxOutlinedTextField","fun EquinoxOutlinedTextField(modifier: Modifier = Modifier, outlinedTextFieldStyle: TextStyle = LocalTextStyle.current, outlinedTextFieldColors: TextFieldColors = OutlinedTextFieldDefaults.colors(), width: Dp = 300.dp, value: MutableState<String>, mustBeInLowerCase: Boolean = false, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = if (mustBeInLowerCase)\n            it.lowercase()\n        else\n            it\n    }, label: StringResource? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: StringResource? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: StringResource? = null, errorTextStyle: TextStyle = LocalTextStyle.current, trailingIcon: () -> Unit? = {\n        IconButton(\n            onClick = { value.value = \"\" }\n        ) {\n            Icon(\n                imageVector = Icons.Default.Clear,\n                contentDescription = null\n            )\n        }\n    }, visualTransformation: VisualTransformation = VisualTransformation.None, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","com.tecknobit.equinoxcompose.components.EquinoxOutlinedTextField"]},{"name":"fun EquinoxTextField(modifier: Modifier = Modifier, textFieldStyle: TextStyle = LocalTextStyle.current, textFieldColors: TextFieldColors = TextFieldDefaults.colors(), width: Dp = 280.dp, value: MutableState<String>, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = it\n    }, label: String? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: String? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: String? = null, errorTextStyle: TextStyle = LocalTextStyle.current, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","description":"com.tecknobit.equinoxcompose.components.EquinoxTextField","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-text-field.html","searchKeys":["EquinoxTextField","fun EquinoxTextField(modifier: Modifier = Modifier, textFieldStyle: TextStyle = LocalTextStyle.current, textFieldColors: TextFieldColors = TextFieldDefaults.colors(), width: Dp = 280.dp, value: MutableState<String>, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = it\n    }, label: String? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: String? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: String? = null, errorTextStyle: TextStyle = LocalTextStyle.current, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","com.tecknobit.equinoxcompose.components.EquinoxTextField"]},{"name":"fun EquinoxTextField(modifier: Modifier = Modifier, textFieldStyle: TextStyle = LocalTextStyle.current, textFieldColors: TextFieldColors = TextFieldDefaults.colors(), width: Dp = 280.dp, value: MutableState<String>, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = it\n    }, label: StringResource? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: StringResource? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: StringResource? = null, errorTextStyle: TextStyle = LocalTextStyle.current, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","description":"com.tecknobit.equinoxcompose.components.EquinoxTextField","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-equinox-text-field.html","searchKeys":["EquinoxTextField","fun EquinoxTextField(modifier: Modifier = Modifier, textFieldStyle: TextStyle = LocalTextStyle.current, textFieldColors: TextFieldColors = TextFieldDefaults.colors(), width: Dp = 280.dp, value: MutableState<String>, maxLines: Int = 1, validator: (String) -> Boolean? = null, isError: MutableState<Boolean> = remember { mutableStateOf(false) }, onValueChange: (String) -> Unit = {\n        if (validator != null)\n            isError.value = value.value.isNotEmpty() && !validator.invoke(it)\n        value.value = it\n    }, label: StringResource? = null, labelStyle: TextStyle = LocalTextStyle.current, placeholder: StringResource? = null, placeholderStyle: TextStyle = LocalTextStyle.current, errorText: StringResource? = null, errorTextStyle: TextStyle = LocalTextStyle.current, keyboardOptions: KeyboardOptions = KeyboardOptions.Default, keyboardActions: KeyboardActions = KeyboardActions.Default)","com.tecknobit.equinoxcompose.components.EquinoxTextField"]},{"name":"fun ErrorUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, errorIcon: ImageVector = Icons.Default.Error, errorColor: Color = MaterialTheme.colorScheme.errorContainer, errorMessage: String, retryAction: () -> Unit? = null, retryText: String? = null)","description":"com.tecknobit.equinoxcompose.components.ErrorUI","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-error-u-i.html","searchKeys":["ErrorUI","fun ErrorUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, errorIcon: ImageVector = Icons.Default.Error, errorColor: Color = MaterialTheme.colorScheme.errorContainer, errorMessage: String, retryAction: () -> Unit? = null, retryText: String? = null)","com.tecknobit.equinoxcompose.components.ErrorUI"]},{"name":"fun ErrorUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, errorIcon: ImageVector = Icons.Default.Error, errorColor: Color = MaterialTheme.colorScheme.errorContainer, errorMessage: StringResource = Res.string.an_error_occurred, retryAction: () -> Unit? = null, retryText: StringResource = Res.string.retry)","description":"com.tecknobit.equinoxcompose.components.ErrorUI","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-error-u-i.html","searchKeys":["ErrorUI","fun ErrorUI(containerModifier: Modifier = Modifier, imageModifier: Modifier = Modifier, textStyle: TextStyle = TextStyle.Default, errorIcon: ImageVector = Icons.Default.Error, errorColor: Color = MaterialTheme.colorScheme.errorContainer, errorMessage: StringResource = Res.string.an_error_occurred, retryAction: () -> Unit? = null, retryText: StringResource = Res.string.retry)","com.tecknobit.equinoxcompose.components.ErrorUI"]},{"name":"fun ManagedContent(content: () -> Unit, viewModel: EquinoxViewModel)","description":"com.tecknobit.equinoxcompose.helpers.session.ManagedContent","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-managed-content.html","searchKeys":["ManagedContent","fun ManagedContent(content: () -> Unit, viewModel: EquinoxViewModel)","com.tecknobit.equinoxcompose.helpers.session.ManagedContent"]},{"name":"fun Modifier.colorOneSideBorder(borderToColor: BorderToColor = START, width: Dp, color: Color, shape: Shape = RectangleShape): Modifier","description":"com.tecknobit.equinoxcompose.utilities.colorOneSideBorder","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/color-one-side-border.html","searchKeys":["colorOneSideBorder","fun Modifier.colorOneSideBorder(borderToColor: BorderToColor = START, width: Dp, color: Color, shape: Shape = RectangleShape): Modifier","com.tecknobit.equinoxcompose.utilities.colorOneSideBorder"]},{"name":"fun Modifier.disableWritingModeOnFocusGain(): Modifier","description":"com.tecknobit.equinoxcompose.components.disableWritingModeOnFocusGain","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/disable-writing-mode-on-focus-gain.html","searchKeys":["disableWritingModeOnFocusGain","fun Modifier.disableWritingModeOnFocusGain(): Modifier","com.tecknobit.equinoxcompose.components.disableWritingModeOnFocusGain"]},{"name":"fun Modifier.disableWritingModeOnTap(): Modifier","description":"com.tecknobit.equinoxcompose.components.disableWritingModeOnTap","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/disable-writing-mode-on-tap.html","searchKeys":["disableWritingModeOnTap","fun Modifier.disableWritingModeOnTap(): Modifier","com.tecknobit.equinoxcompose.components.disableWritingModeOnTap"]},{"name":"fun ShowContent()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.ShowContent","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/-show-content.html","searchKeys":["ShowContent","fun ShowContent()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.ShowContent"]},{"name":"fun String.toColor(): Color","description":"com.tecknobit.equinoxcompose.utilities.toColor","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/to-color.html","searchKeys":["toColor","fun String.toColor(): Color","com.tecknobit.equinoxcompose.utilities.toColor"]},{"name":"fun SuspendUntilElementOnScreen(elementVisible: MutableState<Boolean>)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.SuspendUntilElementOnScreen","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/-suspend-until-element-on-screen.html","searchKeys":["SuspendUntilElementOnScreen","fun SuspendUntilElementOnScreen(elementVisible: MutableState<Boolean>)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.SuspendUntilElementOnScreen"]},{"name":"fun TextDivider(containerModifier: Modifier = Modifier, fillMaxWidth: Boolean = true, thickness: Dp = DividerDefaults.Thickness, dividerColor: Color = DividerDefaults.color, text: String, textStyle: TextStyle = TextStyle.Default)","description":"com.tecknobit.equinoxcompose.components.TextDivider","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-text-divider.html","searchKeys":["TextDivider","fun TextDivider(containerModifier: Modifier = Modifier, fillMaxWidth: Boolean = true, thickness: Dp = DividerDefaults.Thickness, dividerColor: Color = DividerDefaults.color, text: String, textStyle: TextStyle = TextStyle.Default)","com.tecknobit.equinoxcompose.components.TextDivider"]},{"name":"fun TextDivider(containerModifier: Modifier = Modifier, fillMaxWidth: Boolean = true, thickness: Dp = DividerDefaults.Thickness, dividerColor: Color = DividerDefaults.color, text: StringResource, textStyle: TextStyle = TextStyle.Default)","description":"com.tecknobit.equinoxcompose.components.TextDivider","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-text-divider.html","searchKeys":["TextDivider","fun TextDivider(containerModifier: Modifier = Modifier, fillMaxWidth: Boolean = true, thickness: Dp = DividerDefaults.Thickness, dividerColor: Color = DividerDefaults.color, text: StringResource, textStyle: TextStyle = TextStyle.Default)","com.tecknobit.equinoxcompose.components.TextDivider"]},{"name":"fun WriteableText(isInWritingMode: MutableState<Boolean>, writableModifier: Modifier = Modifier, writeableTextColors: TextFieldColors = TextFieldDefaults.colors(\n        unfocusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedIndicatorColor = MaterialTheme.colorScheme.inversePrimary,\n        unfocusedIndicatorColor = MaterialTheme.colorScheme.primary,\n        cursorColor = MaterialTheme.colorScheme.inversePrimary,\n        focusedTextColor = Color.White,\n        unfocusedTextColor = Color.White\n    ), writeableTextWidth: Dp = 280.dp, writeableText: MutableState<String>, writeableTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), onWriting: (String) -> Unit = {\n        writeableText.value = it\n    }, placeholder: String, placeholderStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), displayedTextModifier: Modifier = Modifier, displayedText: String = writeableText.value, displayedTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), changeEditModeClickingOnSimpleText: Boolean = true)","description":"com.tecknobit.equinoxcompose.components.WriteableText","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-writeable-text.html","searchKeys":["WriteableText","fun WriteableText(isInWritingMode: MutableState<Boolean>, writableModifier: Modifier = Modifier, writeableTextColors: TextFieldColors = TextFieldDefaults.colors(\n        unfocusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedIndicatorColor = MaterialTheme.colorScheme.inversePrimary,\n        unfocusedIndicatorColor = MaterialTheme.colorScheme.primary,\n        cursorColor = MaterialTheme.colorScheme.inversePrimary,\n        focusedTextColor = Color.White,\n        unfocusedTextColor = Color.White\n    ), writeableTextWidth: Dp = 280.dp, writeableText: MutableState<String>, writeableTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), onWriting: (String) -> Unit = {\n        writeableText.value = it\n    }, placeholder: String, placeholderStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), displayedTextModifier: Modifier = Modifier, displayedText: String = writeableText.value, displayedTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), changeEditModeClickingOnSimpleText: Boolean = true)","com.tecknobit.equinoxcompose.components.WriteableText"]},{"name":"fun WriteableText(isInWritingMode: MutableState<Boolean>, writableModifier: Modifier = Modifier, writeableTextColors: TextFieldColors = TextFieldDefaults.colors(\n        unfocusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedIndicatorColor = MaterialTheme.colorScheme.inversePrimary,\n        unfocusedIndicatorColor = MaterialTheme.colorScheme.primary,\n        cursorColor = MaterialTheme.colorScheme.inversePrimary,\n        focusedTextColor = Color.White,\n        unfocusedTextColor = Color.White\n    ), writeableTextWidth: Dp = 280.dp, writeableText: MutableState<String>, writeableTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), onWriting: (String) -> Unit = {\n        writeableText.value = it\n    }, placeholder: StringResource, placeholderStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), displayedTextModifier: Modifier = Modifier, displayedText: String = writeableText.value, displayedTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), changeEditModeClickingOnSimpleText: Boolean = true)","description":"com.tecknobit.equinoxcompose.components.WriteableText","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-writeable-text.html","searchKeys":["WriteableText","fun WriteableText(isInWritingMode: MutableState<Boolean>, writableModifier: Modifier = Modifier, writeableTextColors: TextFieldColors = TextFieldDefaults.colors(\n        unfocusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedContainerColor = MaterialTheme.colorScheme.primary,\n        focusedIndicatorColor = MaterialTheme.colorScheme.inversePrimary,\n        unfocusedIndicatorColor = MaterialTheme.colorScheme.primary,\n        cursorColor = MaterialTheme.colorScheme.inversePrimary,\n        focusedTextColor = Color.White,\n        unfocusedTextColor = Color.White\n    ), writeableTextWidth: Dp = 280.dp, writeableText: MutableState<String>, writeableTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), onWriting: (String) -> Unit = {\n        writeableText.value = it\n    }, placeholder: StringResource, placeholderStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), displayedTextModifier: Modifier = Modifier, displayedText: String = writeableText.value, displayedTextStyle: TextStyle = LocalTextStyle.current.merge(\n        fontSize = 20.sp\n    ), changeEditModeClickingOnSimpleText: Boolean = true)","com.tecknobit.equinoxcompose.components.WriteableText"]},{"name":"fun auth()","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.auth","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/auth.html","searchKeys":["auth","fun auth()","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.auth"]},{"name":"fun changeEmail(onSuccess: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeEmail","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/change-email.html","searchKeys":["changeEmail","fun changeEmail(onSuccess: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeEmail"]},{"name":"fun changeLanguage(newLanguage: String, onSuccess: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeLanguage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/change-language.html","searchKeys":["changeLanguage","fun changeLanguage(newLanguage: String, onSuccess: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeLanguage"]},{"name":"fun changePassword(onSuccess: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changePassword","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/change-password.html","searchKeys":["changePassword","fun changePassword(onSuccess: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changePassword"]},{"name":"fun changeProfilePic(imagePath: String, profilePic: MutableState<String>)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeProfilePic","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/change-profile-pic.html","searchKeys":["changeProfilePic","fun changeProfilePic(imagePath: String, profilePic: MutableState<String>)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeProfilePic"]},{"name":"fun changeTheme(newTheme: <Error class: unknown class>, onChange: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeTheme","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/change-theme.html","searchKeys":["changeTheme","fun changeTheme(newTheme: <Error class: unknown class>, onChange: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.changeTheme"]},{"name":"fun clearSession(onClear: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.clearSession","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/clear-session.html","searchKeys":["clearSession","fun clearSession(onClear: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.clearSession"]},{"name":"fun deleteAccount(onDelete: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.deleteAccount","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/delete-account.html","searchKeys":["deleteAccount","fun deleteAccount(onDelete: () -> Unit)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.deleteAccount"]},{"name":"fun disableWritingMode()","description":"com.tecknobit.equinoxcompose.components.disableWritingMode","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/disable-writing-mode.html","searchKeys":["disableWritingMode","fun disableWritingMode()","com.tecknobit.equinoxcompose.components.disableWritingMode"]},{"name":"fun enableWritingMode()","description":"com.tecknobit.equinoxcompose.components.enableWritingMode","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/enable-writing-mode.html","searchKeys":["enableWritingMode","fun enableWritingMode()","com.tecknobit.equinoxcompose.components.enableWritingMode"]},{"name":"fun generateRandomColor(): Color","description":"com.tecknobit.equinoxcompose.utilities.generateRandomColor","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/generate-random-color.html","searchKeys":["generateRandomColor","fun generateRandomColor(): Color","com.tecknobit.equinoxcompose.utilities.generateRandomColor"]},{"name":"fun setHasBeenDisconnectedValue(hasBeenDisconnectedValue: Boolean)","description":"com.tecknobit.equinoxcompose.helpers.session.setHasBeenDisconnectedValue","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/set-has-been-disconnected-value.html","searchKeys":["setHasBeenDisconnectedValue","fun setHasBeenDisconnectedValue(hasBeenDisconnectedValue: Boolean)","com.tecknobit.equinoxcompose.helpers.session.setHasBeenDisconnectedValue"]},{"name":"fun setServerOfflineValue(isServerOfflineValue: Boolean)","description":"com.tecknobit.equinoxcompose.helpers.session.setServerOfflineValue","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/set-server-offline-value.html","searchKeys":["setServerOfflineValue","fun setServerOfflineValue(isServerOfflineValue: Boolean)","com.tecknobit.equinoxcompose.helpers.session.setServerOfflineValue"]},{"name":"fun setUpSession(serverOfflineMessage: String = stringResource(Res.string.server_currently_offline), serverOfflineIcon: ImageVector = Icons.Default.Warning, noInternetConnectionMessage: String = stringResource(Res.string.no_internet_connection), noInternetConnectionIcon: ImageVector = vectorResource(Res.drawable.no_internet), hasBeenDisconnectedAction: () -> Unit)","description":"com.tecknobit.equinoxcompose.helpers.session.setUpSession","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/set-up-session.html","searchKeys":["setUpSession","fun setUpSession(serverOfflineMessage: String = stringResource(Res.string.server_currently_offline), serverOfflineIcon: ImageVector = Icons.Default.Warning, noInternetConnectionMessage: String = stringResource(Res.string.no_internet_connection), noInternetConnectionIcon: ImageVector = vectorResource(Res.drawable.no_internet), hasBeenDisconnectedAction: () -> Unit)","com.tecknobit.equinoxcompose.helpers.session.setUpSession"]},{"name":"fun setUpSession(sessionSetupValue: SessionSetup)","description":"com.tecknobit.equinoxcompose.helpers.session.setUpSession","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/set-up-session.html","searchKeys":["setUpSession","fun setUpSession(sessionSetupValue: SessionSetup)","com.tecknobit.equinoxcompose.helpers.session.setUpSession"]},{"name":"fun valueOf(value: String): BorderToColor","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.valueOf","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/value-of.html","searchKeys":["valueOf","fun valueOf(value: String): BorderToColor","com.tecknobit.equinoxcompose.utilities.BorderToColor.valueOf"]},{"name":"fun values(): Array<BorderToColor>","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.values","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/values.html","searchKeys":["values","fun values(): Array<BorderToColor>","com.tecknobit.equinoxcompose.utilities.BorderToColor.values"]},{"name":"lateinit var email: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.email","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/email.html","searchKeys":["email","lateinit var email: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.email"]},{"name":"lateinit var emailError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.emailError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/email-error.html","searchKeys":["emailError","lateinit var emailError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.emailError"]},{"name":"lateinit var host: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.host","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/host.html","searchKeys":["host","lateinit var host: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.host"]},{"name":"lateinit var hostError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.hostError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/host-error.html","searchKeys":["hostError","lateinit var hostError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.hostError"]},{"name":"lateinit var isSignUp: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.isSignUp","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/is-sign-up.html","searchKeys":["isSignUp","lateinit var isSignUp: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.isSignUp"]},{"name":"lateinit var name: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.name","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/name.html","searchKeys":["name","lateinit var name: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.name"]},{"name":"lateinit var nameError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.nameError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/name-error.html","searchKeys":["nameError","lateinit var nameError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.nameError"]},{"name":"lateinit var newEmail: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newEmail","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/new-email.html","searchKeys":["newEmail","lateinit var newEmail: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newEmail"]},{"name":"lateinit var newEmailError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newEmailError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/new-email-error.html","searchKeys":["newEmailError","lateinit var newEmailError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newEmailError"]},{"name":"lateinit var newPassword: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newPassword","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/new-password.html","searchKeys":["newPassword","lateinit var newPassword: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newPassword"]},{"name":"lateinit var newPasswordError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newPasswordError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/new-password-error.html","searchKeys":["newPasswordError","lateinit var newPasswordError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.newPasswordError"]},{"name":"lateinit var password: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.password","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/password.html","searchKeys":["password","lateinit var password: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.password"]},{"name":"lateinit var passwordError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.passwordError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/password-error.html","searchKeys":["passwordError","lateinit var passwordError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.passwordError"]},{"name":"lateinit var serverSecret: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.serverSecret","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/server-secret.html","searchKeys":["serverSecret","lateinit var serverSecret: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.serverSecret"]},{"name":"lateinit var serverSecretError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.serverSecretError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/server-secret-error.html","searchKeys":["serverSecretError","lateinit var serverSecretError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.serverSecretError"]},{"name":"lateinit var surname: MutableState<String>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.surname","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/surname.html","searchKeys":["surname","lateinit var surname: MutableState<String>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.surname"]},{"name":"lateinit var surnameError: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.surnameError","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/surname-error.html","searchKeys":["surnameError","lateinit var surnameError: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.surnameError"]},{"name":"open class EquinoxProfileViewModel(val snackbarHostState: SnackbarHostState, val requester: <Error class: unknown class>, val localUser: <Error class: unknown class>) : EquinoxViewModel","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/index.html","searchKeys":["EquinoxProfileViewModel","open class EquinoxProfileViewModel(val snackbarHostState: SnackbarHostState, val requester: <Error class: unknown class>, val localUser: <Error class: unknown class>) : EquinoxViewModel","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel"]},{"name":"open fun canRefresherStart(): Boolean","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.canRefresherStart","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/can-refresher-start.html","searchKeys":["canRefresherStart","open fun canRefresherStart(): Boolean","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.canRefresherStart"]},{"name":"open fun continueToFetch(currentContext: <Error class: unknown class><out <Error class: unknown class>>): Boolean","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.continueToFetch","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/continue-to-fetch.html","searchKeys":["continueToFetch","open fun continueToFetch(currentContext: <Error class: unknown class><out <Error class: unknown class>>): Boolean","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.continueToFetch"]},{"name":"open fun execRefreshingRoutine(currentContext: <Error class: unknown class><out <Error class: unknown class>>, routine: () -> Unit, repeatRoutine: Boolean, refreshDelay: Long)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.execRefreshingRoutine","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/exec-refreshing-routine.html","searchKeys":["execRefreshingRoutine","open fun execRefreshingRoutine(currentContext: <Error class: unknown class><out <Error class: unknown class>>, routine: () -> Unit, repeatRoutine: Boolean, refreshDelay: Long)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.execRefreshingRoutine"]},{"name":"open fun restartRefresher()","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.restartRefresher","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/restart-refresher.html","searchKeys":["restartRefresher","open fun restartRefresher()","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.restartRefresher"]},{"name":"open fun suspendRefresher()","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.suspendRefresher","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/suspend-refresher.html","searchKeys":["suspendRefresher","open fun suspendRefresher()","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.suspendRefresher"]},{"name":"private const val GOOGLE_DNS: String","description":"com.tecknobit.equinoxcompose.helpers.session.GOOGLE_DNS","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-g-o-o-g-l-e_-d-n-s.html","searchKeys":["GOOGLE_DNS","private const val GOOGLE_DNS: String","com.tecknobit.equinoxcompose.helpers.session.GOOGLE_DNS"]},{"name":"private constructor()","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.BorderToColor","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/-border-to-color.html","searchKeys":["BorderToColor","private constructor()","com.tecknobit.equinoxcompose.utilities.BorderToColor.BorderToColor"]},{"name":"private fun CustomDivider(modifier: Modifier = Modifier, thickness: Dp = DividerDefaults.Thickness, color: Color = DividerDefaults.color)","description":"com.tecknobit.equinoxcompose.components.CustomDivider","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/-custom-divider.html","searchKeys":["CustomDivider","private fun CustomDivider(modifier: Modifier = Modifier, thickness: Dp = DividerDefaults.Thickness, color: Color = DividerDefaults.color)","com.tecknobit.equinoxcompose.components.CustomDivider"]},{"name":"private fun InstantiateSessionInstances()","description":"com.tecknobit.equinoxcompose.helpers.session.InstantiateSessionInstances","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-instantiate-session-instances.html","searchKeys":["InstantiateSessionInstances","private fun InstantiateSessionInstances()","com.tecknobit.equinoxcompose.helpers.session.InstantiateSessionInstances"]},{"name":"private fun LifecycleManager(lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current)","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.LifecycleManager","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/-lifecycle-manager.html","searchKeys":["LifecycleManager","private fun LifecycleManager(lifecycleOwner: LifecycleOwner = LocalLifecycleOwner.current)","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.LifecycleManager"]},{"name":"private fun NoInternetConnectionUi(viewModel: EquinoxViewModel)","description":"com.tecknobit.equinoxcompose.helpers.session.NoInternetConnectionUi","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-no-internet-connection-ui.html","searchKeys":["NoInternetConnectionUi","private fun NoInternetConnectionUi(viewModel: EquinoxViewModel)","com.tecknobit.equinoxcompose.helpers.session.NoInternetConnectionUi"]},{"name":"private fun ServerOfflineUi()","description":"com.tecknobit.equinoxcompose.helpers.session.ServerOfflineUi","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-server-offline-ui.html","searchKeys":["ServerOfflineUi","private fun ServerOfflineUi()","com.tecknobit.equinoxcompose.helpers.session.ServerOfflineUi"]},{"name":"private fun getUserLanguage(): String","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getUserLanguage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/get-user-language.html","searchKeys":["getUserLanguage","private fun getUserLanguage(): String","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getUserLanguage"]},{"name":"private fun hasBeenDisconnectedAction()","description":"com.tecknobit.equinoxcompose.helpers.session.hasBeenDisconnectedAction","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/has-been-disconnected-action.html","searchKeys":["hasBeenDisconnectedAction","private fun hasBeenDisconnectedAction()","com.tecknobit.equinoxcompose.helpers.session.hasBeenDisconnectedAction"]},{"name":"private fun signIn()","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signIn","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/sign-in.html","searchKeys":["signIn","private fun signIn()","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signIn"]},{"name":"private fun signUp()","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signUp","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/sign-up.html","searchKeys":["signUp","private fun signUp()","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signUp"]},{"name":"private lateinit var currentActiveWritingMode: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.components.currentActiveWritingMode","location":"-equinox--compose/com.tecknobit.equinoxcompose.components/current-active-writing-mode.html","searchKeys":["currentActiveWritingMode","private lateinit var currentActiveWritingMode: MutableState<Boolean>","com.tecknobit.equinoxcompose.components.currentActiveWritingMode"]},{"name":"private lateinit var hasBeenDisconnected: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.session.hasBeenDisconnected","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/has-been-disconnected.html","searchKeys":["hasBeenDisconnected","private lateinit var hasBeenDisconnected: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.session.hasBeenDisconnected"]},{"name":"private lateinit var isServerOffline: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.session.isServerOffline","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/is-server-offline.html","searchKeys":["isServerOffline","private lateinit var isServerOffline: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.session.isServerOffline"]},{"name":"private lateinit var noInternetConnection: MutableState<Boolean>","description":"com.tecknobit.equinoxcompose.helpers.session.noInternetConnection","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/no-internet-connection.html","searchKeys":["noInternetConnection","private lateinit var noInternetConnection: MutableState<Boolean>","com.tecknobit.equinoxcompose.helpers.session.noInternetConnection"]},{"name":"private lateinit var sessionSetup: SessionSetup","description":"com.tecknobit.equinoxcompose.helpers.session.sessionSetup","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/session-setup.html","searchKeys":["sessionSetup","private lateinit var sessionSetup: SessionSetup","com.tecknobit.equinoxcompose.helpers.session.sessionSetup"]},{"name":"private val fetcherManager: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.fetcherManager","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/fetcher-manager.html","searchKeys":["fetcherManager","private val fetcherManager: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.fetcherManager"]},{"name":"private val localUser: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.localUser","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/local-user.html","searchKeys":["localUser","private val localUser: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.localUser"]},{"name":"private val localUser: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.localUser","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/local-user.html","searchKeys":["localUser","private val localUser: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.localUser"]},{"name":"private val loggerEnabled: Boolean = true","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.loggerEnabled","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/logger-enabled.html","searchKeys":["loggerEnabled","private val loggerEnabled: Boolean = true","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.loggerEnabled"]},{"name":"private val painter: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.painter","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/painter.html","searchKeys":["painter","private val painter: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.painter"]},{"name":"private val refreshRoutine: CoroutineScope","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.refreshRoutine","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/refresh-routine.html","searchKeys":["refreshRoutine","private val refreshRoutine: CoroutineScope","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.refreshRoutine"]},{"name":"private val requester: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.requester","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/requester.html","searchKeys":["requester","private val requester: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.requester"]},{"name":"private val requester: <Error class: unknown class>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.requester","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-profile-view-model/requester.html","searchKeys":["requester","private val requester: <Error class: unknown class>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxProfileViewModel.requester"]},{"name":"protected abstract fun ArrangeScreenContent()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.ArrangeScreenContent","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/-arrange-screen-content.html","searchKeys":["ArrangeScreenContent","protected abstract fun ArrangeScreenContent()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.ArrangeScreenContent"]},{"name":"protected fun showSnackbarMessage(helper: <Error class: unknown class>)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.showSnackbarMessage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/show-snackbar-message.html","searchKeys":["showSnackbarMessage","protected fun showSnackbarMessage(helper: <Error class: unknown class>)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.showSnackbarMessage"]},{"name":"protected fun showSnackbarMessage(message: String)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.showSnackbarMessage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/show-snackbar-message.html","searchKeys":["showSnackbarMessage","protected fun showSnackbarMessage(message: String)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.showSnackbarMessage"]},{"name":"protected open fun getSignInCustomParameters(): Array<out Any?>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getSignInCustomParameters","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/get-sign-in-custom-parameters.html","searchKeys":["getSignInCustomParameters","protected open fun getSignInCustomParameters(): Array<out Any?>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getSignInCustomParameters"]},{"name":"protected open fun getSignUpCustomParameters(): Array<out Any?>","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getSignUpCustomParameters","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/get-sign-up-custom-parameters.html","searchKeys":["getSignUpCustomParameters","protected open fun getSignUpCustomParameters(): Array<out Any?>","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.getSignUpCustomParameters"]},{"name":"protected open fun launchApp(response: <Error class: unknown class>, name: String, surname: String, language: String, vararg custom: Any?)","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.launchApp","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/launch-app.html","searchKeys":["launchApp","protected open fun launchApp(response: <Error class: unknown class>, name: String, surname: String, language: String, vararg custom: Any?)","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.launchApp"]},{"name":"protected open fun onAny()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onAny","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-any.html","searchKeys":["onAny","protected open fun onAny()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onAny"]},{"name":"protected open fun onCreate()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onCreate","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-create.html","searchKeys":["onCreate","protected open fun onCreate()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onCreate"]},{"name":"protected open fun onDestroy()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onDestroy","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-destroy.html","searchKeys":["onDestroy","protected open fun onDestroy()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onDestroy"]},{"name":"protected open fun onDispose()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onDispose","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-dispose.html","searchKeys":["onDispose","protected open fun onDispose()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onDispose"]},{"name":"protected open fun onPause()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onPause","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-pause.html","searchKeys":["onPause","protected open fun onPause()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onPause"]},{"name":"protected open fun onResume()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onResume","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-resume.html","searchKeys":["onResume","protected open fun onResume()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onResume"]},{"name":"protected open fun onStart()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onStart","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-start.html","searchKeys":["onStart","protected open fun onStart()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onStart"]},{"name":"protected open fun onStop()","description":"com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onStop","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-equinox-screen/on-stop.html","searchKeys":["onStop","protected open fun onStop()","com.tecknobit.equinoxcompose.helpers.session.EquinoxScreen.onStop"]},{"name":"protected open fun signInFormIsValid(): Boolean","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signInFormIsValid","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/sign-in-form-is-valid.html","searchKeys":["signInFormIsValid","protected open fun signInFormIsValid(): Boolean","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signInFormIsValid"]},{"name":"protected open fun signUpFormIsValid(): Boolean","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signUpFormIsValid","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-connect-view-model/sign-up-form-is-valid.html","searchKeys":["signUpFormIsValid","protected open fun signUpFormIsValid(): Boolean","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxConnectViewModel.signUpFormIsValid"]},{"name":"protected val snackbarHostState: SnackbarHostState? = null","description":"com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.snackbarHostState","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.viewmodels/-equinox-view-model/snackbar-host-state.html","searchKeys":["snackbarHostState","protected val snackbarHostState: SnackbarHostState? = null","com.tecknobit.equinoxcompose.helpers.viewmodels.EquinoxViewModel.snackbarHostState"]},{"name":"val entries: EnumEntries<BorderToColor>","description":"com.tecknobit.equinoxcompose.utilities.BorderToColor.entries","location":"-equinox--compose/com.tecknobit.equinoxcompose.utilities/-border-to-color/entries.html","searchKeys":["entries","val entries: EnumEntries<BorderToColor>","com.tecknobit.equinoxcompose.utilities.BorderToColor.entries"]},{"name":"val hasBeenDisconnectedAction: () -> Unit","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.hasBeenDisconnectedAction","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/has-been-disconnected-action.html","searchKeys":["hasBeenDisconnectedAction","val hasBeenDisconnectedAction: () -> Unit","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.hasBeenDisconnectedAction"]},{"name":"val noInternetConnectionIcon: ImageVector","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.noInternetConnectionIcon","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/no-internet-connection-icon.html","searchKeys":["noInternetConnectionIcon","val noInternetConnectionIcon: ImageVector","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.noInternetConnectionIcon"]},{"name":"val noInternetConnectionMessage: String","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.noInternetConnectionMessage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/no-internet-connection-message.html","searchKeys":["noInternetConnectionMessage","val noInternetConnectionMessage: String","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.noInternetConnectionMessage"]},{"name":"val serverOfflineIcon: ImageVector","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.serverOfflineIcon","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/server-offline-icon.html","searchKeys":["serverOfflineIcon","val serverOfflineIcon: ImageVector","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.serverOfflineIcon"]},{"name":"val serverOfflineMessage: String","description":"com.tecknobit.equinoxcompose.helpers.session.SessionSetup.serverOfflineMessage","location":"-equinox--compose/com.tecknobit.equinoxcompose.helpers.session/-session-setup/server-offline-message.html","searchKeys":["serverOfflineMessage","val serverOfflineMessage: String","com.tecknobit.equinoxcompose.helpers.session.SessionSetup.serverOfflineMessage"]}]
